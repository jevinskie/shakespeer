#!/bin/sh

die()
{
    message=$1
    echo "$message"
    test -n "$MYDEV" && hdiutil eject $MYDEV
    exit 1
}

verify_version()
{
    configure_version=$(sed -nE 's/AC_INIT\(([[:alnum:]]+), ([[:alnum:]+._-]+),.*/\2/p' configure.ac)
    tag_version=$(echo $tag | sed -e 's/^AQUA_V//' -e 's/_/./g')

    if test "$tag_version" != "$configure_version"; then
        echo "Tag is $tag (version $tag_version), but configure.ac says version is $configure_version"
        read -e -n 1 -p "really continue? (y/N)" sure
        test "$sure" = "n" -o "$sure" = "N" -o -z "$sure" && exit
    fi
}

repo=$1
tag=$2
if test -z "$repo"; then
    echo "Must specify darcs repo to build from"
    progname=`basename $0`
    echo "Example: $progname http://darcs.hedenfalk.se/shakespeer AQUA_V0_9_3"
    echo "     or: $progname `pwd`"
    exit 2
fi

if test -z "$tag"; then
    echo "Building branch tag, are you sure? "
    read -e -n 1 -p "(y/N)" sure
    test "$sure" = "n" -o "$sure" = "N" -o -z "$sure" && exit
    version=snapshot-`date +%Y%m%d`
else
    version=$(sed -nE 's/AC_INIT\(([^,]+), ([^,]+),.*/\2/p' configure.ac)
fi

test -n "$version" || die "Can't find the right version"

if ! test -d build-$version; then
    echo "creating build directory build-$version"
    mkdir build-$version || die "unable to create build directory"
fi

cwd=`pwd`
echo "entering directory build-$version"
cd build-$version || die "unable to enter build directory"

tag_arg=
test -n "$tag" && tag_arg="--tag $tag"

echo "checking out sources with tag $tag"
darcs get --partial --no-pristine-tree $tag_arg "$repo"
cd shakespeer || die "couldn't find expected directory shakespeer"

test -n "$tag" && verify_version

export LIBTOOLIZE=glibtoolize

test -f Makefile || sh ./autogen.sh --disable-coredumps \
    --with-static-sqlite \
    --with-static-expat \
    --with-static-libevent \
    --with-static-db
test -f Makefile || die "configure failed"

make || die "'make' failed -- fix that first"
#make check || die "'make check' failed -- fix that first"

/bin/sh ./domkdmg $version

